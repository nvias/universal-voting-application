#!/usr/bin/env python3
"""
NVIAS Voting System - Portainer Setup Helper
This script helps prepare the configuration for Portainer deployment
"""

import os
import sys
import json
import secrets
import string
from pathlib import Path
from datetime import datetime

class PortainerSetup:
    def __init__(self):
        self.project_root = Path.cwd()
        self.compose_file = self.project_root / "docker-compose.portainer.yml"
        self.env_template = self.project_root / ".env.portainer"
        
        print("üê≥ NVIAS Voting System - Portainer Setup Helper")
        print("=" * 55)
        print("This tool will help you prepare the configuration for Portainer deployment.")
        print()
    
    def generate_secure_key(self, length=32):
        """Generate a secure random key"""
        alphabet = string.ascii_letters + string.digits + "!@#$%^&*"
        return ''.join(secrets.choice(alphabet) for _ in range(length))
    
    def get_user_input(self):
        """Get configuration from user"""
        print("üìù Please provide the following information for your deployment:")
        print()
        
        config = {}
        
        # Domain configuration
        config['WEB_DOMAIN'] = input("üåê Your domain (e.g., voting.yourdomain.com): ").strip()
        if not config['WEB_DOMAIN']:
            config['WEB_DOMAIN'] = "voting.localhost"
            print(f"   Using default: {config['WEB_DOMAIN']}")
        
        config['APP_URL'] = f"https://{config['WEB_DOMAIN']}"
        
        # Security configuration
        print(f"\nüîê Generating secure passwords and keys...")
        config['SECRET_KEY'] = self.generate_secure_key(64)
        config['POSTGRES_PASSWORD'] = self.generate_secure_key(32)
        print(f"   ‚úÖ SECRET_KEY generated (64 characters)")
        print(f"   ‚úÖ POSTGRES_PASSWORD generated (32 characters)")
        
        # Traefik configuration
        config['CERT_RESOLVER'] = input("\nüõ°Ô∏è  Traefik certificate resolver name (e.g., main-resolver): ").strip()
        if not config['CERT_RESOLVER']:
            config['CERT_RESOLVER'] = "main-resolver"
            print(f"   Using default: {config['CERT_RESOLVER']}")
        
        # CORS configuration
        config['CORS_ORIGINS'] = config['APP_URL']
        
        # pgAdmin configuration
        pgadmin_enable = input("\nüìä Enable pgAdmin? (y/N): ").strip().lower()
        if pgadmin_enable == 'y':
            config['PGADMIN_ENABLE'] = "true"
            config['PGADMIN_DOMAIN'] = input("   pgAdmin domain (e.g., pgadmin.yourdomain.com): ").strip()
            if not config['PGADMIN_DOMAIN']:
                config['PGADMIN_DOMAIN'] = f"pgadmin.{config['WEB_DOMAIN'].replace('voting.', '')}"
            config['PGADMIN_EMAIL'] = input("   pgAdmin email: ").strip() or "admin@example.com"
            config['PGADMIN_PASSWORD'] = self.generate_secure_key(24)
            print(f"   ‚úÖ pgAdmin password generated")
        else:
            config['PGADMIN_ENABLE'] = "false"
            config['PGADMIN_DOMAIN'] = "pgadmin.localhost"
            config['PGADMIN_EMAIL'] = "admin@example.com"
            config['PGADMIN_PASSWORD'] = "change_this"
        
        # Project configuration
        config['COMPOSE_PROJECT_NAME'] = "nvias-voting"
        config['FLASK_ENV'] = "production"
        config['POSTGRES_DB'] = "voting_db"
        config['POSTGRES_USER'] = "postgres"
        config['POSTGRES_PORT'] = "5432"
        
        return config
    
    def create_env_file(self, config):
        """Create the .env file for Portainer"""
        env_content = f"""# NVIAS Voting System - Portainer Environment Configuration
# Generated by portainer_setup.py on {config.get('generated_at', 'unknown')}

# ===============================
# PROJECT CONFIGURATION
# ===============================
COMPOSE_PROJECT_NAME={config['COMPOSE_PROJECT_NAME']}
WEB_DOMAIN={config['WEB_DOMAIN']}
APP_URL={config['APP_URL']}

# ===============================
# FLASK APPLICATION SETTINGS
# ===============================
FLASK_ENV={config['FLASK_ENV']}
SECRET_KEY={config['SECRET_KEY']}
HOST=0.0.0.0
PORT=5000

# ===============================
# DATABASE CONFIGURATION
# ===============================
POSTGRES_DB={config['POSTGRES_DB']}
POSTGRES_USER={config['POSTGRES_USER']}
POSTGRES_PASSWORD={config['POSTGRES_PASSWORD']}
POSTGRES_PORT={config['POSTGRES_PORT']}

# ===============================
# CORS CONFIGURATION
# ===============================
CORS_ORIGINS={config['CORS_ORIGINS']}

# ===============================
# TRAEFIK CONFIGURATION
# ===============================
CERT_RESOLVER={config['CERT_RESOLVER']}

# ===============================
# PGADMIN CONFIGURATION
# ===============================
PGADMIN_ENABLE={config['PGADMIN_ENABLE']}
PGADMIN_DOMAIN={config['PGADMIN_DOMAIN']}
PGADMIN_EMAIL={config['PGADMIN_EMAIL']}
PGADMIN_PASSWORD={config['PGADMIN_PASSWORD']}

# ===============================
# GENERATED CONFIGURATION
# ===============================
# This file was generated automatically.
# Keep this file secure and do not commit passwords to version control.
"""
        
        env_file = self.project_root / ".env.portainer.generated"
        with open(env_file, 'w') as f:
            f.write(env_content)
        
        return env_file
    
    def create_portainer_instructions(self, config, env_file):
        """Create step-by-step instructions for Portainer"""
        instructions = f"""
# NVIAS Voting System - Portainer Deployment Instructions

## üöÄ Ready for Deployment!

Your configuration has been generated. Follow these steps to deploy in Portainer:

### Step 1: Create Stack in Portainer
1. Open Portainer web interface
2. Go to **Stacks** ‚Üí **Add Stack**
3. Name: `nvias-voting`
4. Choose **Web editor**

### Step 2: Copy Docker Compose Configuration
Copy the contents of: `docker-compose.portainer.yml`

### Step 3: Set Environment Variables
In Portainer's **Environment variables** section, add these:

```
COMPOSE_PROJECT_NAME=nvias-voting
WEB_DOMAIN={config['WEB_DOMAIN']}
APP_URL={config['APP_URL']}
FLASK_ENV=production
SECRET_KEY={config['SECRET_KEY']}
POSTGRES_DB=voting_db
POSTGRES_USER=postgres
POSTGRES_PASSWORD={config['POSTGRES_PASSWORD']}
CERT_RESOLVER={config['CERT_RESOLVER']}
CORS_ORIGINS={config['CORS_ORIGINS']}
PGADMIN_ENABLE={config['PGADMIN_ENABLE']}
PGADMIN_DOMAIN={config['PGADMIN_DOMAIN']}
PGADMIN_EMAIL={config['PGADMIN_EMAIL']}
PGADMIN_PASSWORD={config['PGADMIN_PASSWORD']}
```

### Step 4: Deploy
1. Click **Deploy the stack**
2. Wait for containers to start
3. Verify both containers are running and healthy

### Step 5: Initialize Database
1. Go to **Containers** ‚Üí `nvias-voting-voting-app-1`
2. Click **Console** ‚Üí **Connect**
3. Run: `python init_db.py`

### Step 6: Access Your Application
- **Main Application**: https://{config['WEB_DOMAIN']}
- **API Health**: https://{config['WEB_DOMAIN']}/api/v1/health
{"- **pgAdmin**: https://" + config['PGADMIN_DOMAIN'] if config['PGADMIN_ENABLE'] == 'true' else ""}

## üîê Security Information

**IMPORTANT**: Your generated passwords are:
- Database Password: {config['POSTGRES_PASSWORD']}
{"- pgAdmin Password: " + config['PGADMIN_PASSWORD'] if config['PGADMIN_ENABLE'] == 'true' else ""}

**Keep these secure!** Store them in a password manager.

## üîß Prerequisites Checklist
- ‚úÖ Traefik is running and configured
- ‚úÖ `traefik_proxy` network exists in Docker
- ‚úÖ DNS record points {config['WEB_DOMAIN']} to your server
- ‚úÖ Ports 80 and 443 are accessible from internet
- ‚úÖ Certificate resolver `{config['CERT_RESOLVER']}` is configured in Traefik

## üÜò Troubleshooting
If deployment fails:
1. Check Traefik is running: `docker ps | grep traefik`
2. Verify network exists: `docker network ls | grep traefik_proxy`
3. Test DNS resolution: `nslookup {config['WEB_DOMAIN']}`
4. Check Portainer logs for error details

## üìû Support
For issues, refer to: `PORTAINER_DEPLOYMENT_GUIDE.md`
"""
        
        instructions_file = self.project_root / "PORTAINER_DEPLOYMENT_INSTRUCTIONS.txt"
        with open(instructions_file, 'w') as f:
            f.write(instructions)
        
        return instructions_file
    
    def save_config_backup(self, config):
        """Save configuration as JSON for backup"""
        # Remove sensitive data for JSON backup
        backup_config = config.copy()
        backup_config['SECRET_KEY'] = '[HIDDEN]'
        backup_config['POSTGRES_PASSWORD'] = '[HIDDEN]'
        backup_config['PGADMIN_PASSWORD'] = '[HIDDEN]'
        
        config_file = self.project_root / "portainer_config_backup.json"
        with open(config_file, 'w') as f:
            json.dump(backup_config, f, indent=2)
        
        return config_file
    
    def run_setup(self):
        """Run the complete setup process"""
        try:
            # Check if required files exist
            if not self.compose_file.exists():
                print(f"‚ùå Required file missing: {self.compose_file}")
                print("Please make sure docker-compose.portainer.yml exists.")
                return False
            
            # Get user configuration
            config = self.get_user_input()
            config['generated_at'] = datetime.now().isoformat()
            
            print(f"\nüìÅ Creating configuration files...")
            
            # Create environment file
            env_file = self.create_env_file(config)
            print(f"‚úÖ Environment file: {env_file}")
            
            # Create instructions
            instructions_file = self.create_portainer_instructions(config, env_file)
            print(f"‚úÖ Instructions file: {instructions_file}")
            
            # Save config backup
            config_file = self.save_config_backup(config)
            print(f"‚úÖ Config backup: {config_file}")
            
            print(f"\nüéâ Setup complete!")
            print(f"=" * 30)
            print(f"üìã Next steps:")
            print(f"1. Review the instructions in: {instructions_file.name}")
            print(f"2. Copy the environment variables from the instructions")
            print(f"3. Deploy the stack in Portainer")
            print(f"4. Access your application at: https://{config['WEB_DOMAIN']}")
            
            print(f"\n‚ö†Ô∏è  Important:")
            print(f"- Keep {env_file.name} secure (contains passwords)")
            print(f"- Don't commit password files to version control")
            print(f"- Store passwords in a secure password manager")
            
            return True
            
        except KeyboardInterrupt:
            print(f"\n\nüõë Setup cancelled by user")
            return False
        except Exception as e:
            print(f"\n‚ùå Setup error: {e}")
            return False

def main():
    """Main function"""
    setup = PortainerSetup()
    
    print("This tool will generate the configuration needed for Portainer deployment.")
    print("You'll need:")
    print("- Your domain name")
    print("- Traefik certificate resolver name")
    print("- Whether you want pgAdmin enabled")
    print()
    
    confirm = input("Continue with setup? (y/N): ")
    if confirm.lower() != 'y':
        print("Setup cancelled.")
        return
    
    success = setup.run_setup()
    
    if success:
        print(f"\nüöÄ Your NVIAS Voting System is ready for Portainer deployment!")
    else:
        print(f"\n‚ùå Setup failed. Please check the errors above.")
        sys.exit(1)

if __name__ == "__main__":
    main()
